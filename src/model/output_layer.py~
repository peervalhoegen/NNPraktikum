# -*- coding: utf-8 -*-

import numpy as np

from util.activation_functions import Activation
from model.classifier import Classifier
from model.logistic_regression import LogisticRegression
from model.layer import Layer

__author__ = "ABC XYZ"  # Adjust this when you copy the file
__email__ = "ABC.XYZ@student.kit.edu"  # Adjust this when you copy the file


class OutputLayer(Layer):
    """
    one generic layer
    """

    def __init__(self, noPerceprons, predecessor, learningRate=0.01, epochs=50):
        #, train, valid, test f√ºr input-layer
        self.learningRate = learningRate
        self.epochs = epochs
        self.perceptronList = [LogisticRegression(None, None, None, learningRate, epochs) for i in range(noPerceprons)]

        self.predecessor = predecessor        #e.g. input-layer is predecessor of first hidden-layer
        #self.predecessor.setSuccessor(self)   #set oneself as successor
	self.error = 0
    def setSuccessor(self, other):
        #should never be called
        pass


    def train(self,input,label):
        predict(input)
        delta     = [(label-self.lastOuputList[j])*self.lastOuputList[j]*(1-self.lastOuputList[j]) for j,p in enumerate(perceptronList)]
        grad      = [[d_j*x_i for x_i in input] for d_j in delta] #list(np.array(delta)*np.array(input))
        for i,p in enumerate(self.perceptronList):
            p.updateWeight(grad[i])


    def predict(self,input):
        #todo
        self.lastOuputList = [p.fire(input_from_somewhere) for p in self.perceptronList]
        
    def propagateBack(self,error):

        lastOuputList = [p.fire(input_from_somewhere) for p in self.perceptronList]
        self.predecessor.propagateBack(error2)

        """Train the Logistic Regression"""
        # TODO: Here you have to implement the Logistic Regression Training
        # Algorithm
        # TODO: use self.trainingSet
        # TODO: use self.validationSet

    def classify(self, testInstance):
        """Classify a single instance.

        Parameters
        ----------
        testInstance : list of floats

        Returns
        -------
        bool :
            True if the testInstance is recognized as a 7, False otherwise.
        """
        # TODO: Here you have to implement the Logistic Regression Algorithm
        # to classify a single instance
        pass

    def evaluate(self, test=None):
        """Evaluate a whole dataset.

        Parameters
        ----------
        test : the dataset to be classified
        if no test, the test set associated to the classifier will be used

        Returns
        -------
        List:
            List of classified decisions for the dataset's entries.
        """
        if test is None:
            test = self.testSet.input
        # Once you can classify an instance, just use map for all of the test
        # set.
        return list(map(self.classify, test))

    def fire(self, input):
        return Activation.sigmoid(np.dot(np.array(input), self.weight))

    def error(target)
        self.target = target
        return target - output

    def updateWeights(ds, learningRate):
        self.delta = computeDerivative() * error(self.target)
	self.weights += learningRate * np.outer(self.delta, self.lastInput)

